#creates Replicaset
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  labels:
    app: frontend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 20
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: nginx:latest
        ports:
        - containerPort: 80


---
apiVersion: v1
kind: Service
metadata:
  name: frontend-svc
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80          # port no that your service has to listern and this is the port you will access
      targetPort: 80  # Target port forwards the request to the backebd pod



---
# this creates  a external classic load balancer
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-svc
# # annotations:                                                              
# #   service.beta.kubernetes.io/aws-load-balancer-type: application        # Creates Application Load Balancer 
# #   service.beta.kubernetes.io/aws-load-balancer-internal: true           # Creates Internal Application Load Balancer
# spec:
#   selector:
#     app: nginx
#   ports:
#     - protocol: TCP
#       port: 80          # port no that your service has to listern and this is the port you will access
#       targetPort: 80  # Target port forwards the request to the backebd pod
#   type: LoadBalancer # This is going to create a load balancer [on your cloud and this is chargable on thetop of eEKS]


# Create Ingres Resource

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: frontend-ingress
spec:
  ingressClassName: nginx
  rules:
  - host: robot-frontend.b54-roboshop.online
    http:
      paths:
      - path: "/"
        pathType: Prefix
        backend: 
          service:
            name: myservicea
            port:
              number: 80
    ingressClassName: nginx
